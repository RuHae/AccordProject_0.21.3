/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace license

import org.accordproject.cicero.runtime.*
import org.accordproject.time.* 

contract LicencingAgreement over LicenseAgreementContract state LicenseStatus {
  
  clause init(request : Request) : Response {
	  set state LicenseStatus{
		  stateId: "license.LicenseStatus",
		  status: true
	  };
	  return Response{}
  }

  clause paymentClause(request : PaymentRequest) : PayOut emits PaymentObligation {
	set state LicenseStatus{
		stateId: "license.LicenseStatus",
		  status: request.status
	};
    
    emit PaymentObligation{
			contract: contract,
			promisor: some(contract.licensee),
			promisee: some(contract.licensor),
			deadline: none,
			amount: clause.amount,
			description: contract.licensee.partyId ++ " should pay contract amount to " ++ contract.licensor.partyId
		};
    return PayOut{ amount: clause.amount  }
  }
  
  clause terminationClause(request : TerminationRequest) : TerminationEarliest emits TerminationObligation {
    set state LicenseStatus{
		stateId: "license.LicenseStatus",
		  status: request.status
	};

    emit TerminationObligation{
			contract: contract,
			promisor: some(contract.licensee),
			promisee: some(contract.licensor),
			deadline: some(addPeriod(now(), clause.TimeBeforeTermination)),
			description: contract.licensee.partyId ++ " can terminate the agreement earliest on " ++ toString(addPeriod(now(), clause.TimeBeforeTermination)) ++ " if the licensor " ++ contract.licensor.partyId ++ " is informed."
		};
    return TerminationEarliest{ EarliestDate: addPeriod(now(), clause.TimeBeforeTermination) }
  }
}


